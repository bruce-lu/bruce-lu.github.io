[
    {
        "ref": "https://bruce-lu.github.io/blog/jvm-tuning/",
        "title": "JVM tuning",
        "section": "blog",
        "date" : "2019.07.04",
        "body": " Tags jvm tuning jstat jhat jmap gc  Env  Spring Cloud Greenwich Spring Boot 2.1.5 Java HotSpot\u0026trade; 64-Bit Server VM (build 25.181-b13, mixed mode) STS (Spring Tool Suite) 4.1.1 MackBook Pro Mojave  Objective  Minimize Full GC, down to 0 if possible  Prerequisites  Build a jar  mvn -B -DskipTests clean package  Baseline - default jvm settings  Run  java -jar discovery-center-0.0.1-SNAPSHOT.jar   jstat -gc  S0C S1C S0U S1U EC EU OC OU MC MU CCSC CCSU YGC YGCT FGC FGCT GCT 7168.0 8192.0 7160.1 0.0 494080.0 332080.5 82944.0 15609.6 46760.0 4 4845.5 6312.0 5953.5 12 0.063 2 0.118 0.181   Timing   5.814 = 2019-06-25 22:32:57.974 - 2019-06-25 22:33:03.788  1st try: still 1 FGC  Run  java -jar -Xms768m -Xmx768m -Xmn700m -XX:SurvivorRatio=10 -XX:+PrintGCDetails -XX:MetaspaceSize=50M discovery-center-0.0.1-SNAPSHOT.jar   jstat  S0C S1C S0U S1U EC EU OC OU MC MU CCSC CCSU YGC YGCT FGC FGCT GCT 59392.0 59392.0 0.0 0.0 598016.0 264071.9 69632.0 23958.9 51200.0 48840.8 7040.0 6531.4 4 0.122 1 0.192 0.313   Timing  5.542 = 2019-06-25 22:46:48.423 - 2019-06-25 22:46:53.965  2nd try: 0 Full GC  Run  java -jar -Xms768m -Xmx768m -Xmn700m -XX:SurvivorRatio=10 -XX:+PrintGCDetails -XX:MetaspaceSize=80M discovery-center-0.0.1-SNAPSHOT.jar   jstat  S0C S1C S0U S1U EC EU OC OU MC MU CCSC CCSU YGC YGCT FGC FGCT GCT 59392.0 59392.0 0.0 24209.6 598016.0 204594.4 69632.0 104.0 51584.0 49021.5 7040.0 6555.6 3 0.127 0 0.000 0.127   Timing  5.166 = 2019-06-25 22:57:28.061 - 2019-06-25 22:57:33.227  Heap dump  cmds  jmap -dump:format=b,file=discovery-center.dump $java-pid jhat -port 8888 discovery-center.dump\n GUI Tools  Eclipse MAT, jconsole, jvisualvm, visualvm\n"
    }
,
    {
        "ref": "https://bruce-lu.github.io/blog/go-build-a-web-api/",
        "title": "Go - Build a web API",
        "section": "blog",
        "date" : "2019.07.04",
        "body": " Objective Build a web API by using Go language on Linux\nSetup Go  Download  wget https://dl.google.com/go/go1.12.4.linux-amd64.tar.gz tar -C /usr/local -xzf ./go1.12.4.linux-amd64.tar.gz\n Configure PATH  Add Go to PATH in ~/.bash_profile\nexport PATH=$PATH:/usr/local/go/bin   Source  . ~/.bash_profile   Reference  Create a Go project mkdir -p /opt/ws/go/src/blue/http cd /opt/ws/go/src/blue/http vim BlueHTTPServer.go  package main; import ( \u0026quot;net/http\u0026quot; ) func say(res http.ResponseWriter, req *http.Request) { res.Write([]byte(\u0026quot;Hey Bruce!\u0026quot;)); } func main(){ http.HandleFunc(\u0026quot;/say\u0026quot;, say); http.Handle(\u0026quot;/say2\u0026quot;, http.HandlerFunc(say)); http.ListenAndServe(\u0026quot;:10001\u0026quot;, nil); select{}; }  Build and run go build BlueHTTPServer.go ./BlueHTTPServer  Test curl http://localhost:10001/say curl http://localhost:10001/say2 # I can see output like this: Hey Bruce!  "
    }
,
    {
        "ref": "https://bruce-lu.github.io/blog/ms-pattern-theory/",
        "title": "Microservices principles",
        "section": "blog",
        "date" : "2019.07.04",
        "body": " DDD  Domain-driven design (DDD) is an approach to software development for complex needs by connecting the implementation to an evolving model. Reference: https://airbrake.io/blog/software-design/domain-driven-design\n CAP  The CAP Theorem is a fundamental theorem in distributed systems that states any distributed system can have at most two of the following three properties. Consistency. Availability. Partition tolerance.\n ACID \u0026amp; BASE  ACID\n Atomic: Everything in a transaction succeeds or the entire transaction is rolled back. Consistent: A transaction cannot leave the database in an inconsistent state. Isolated: Transactions cannot interfere with each other. Durable: Completed transactions persist, even when servers restart etc.  BASE\n Basic Availability Soft-state Eventual consistency   Paxos Raft AKF Scale Cube scale-cube\nSaga Saga pattern\nBFF Backend For Frontend\nReference  Patterns for microservices  "
    }
,
    {
        "ref": "https://bruce-lu.github.io/blog/ms-spring-cloud/",
        "title": "Microservices with Spring Cloud",
        "section": "blog",
        "date" : "2019.07.04",
        "body": " Introduction  Spring Cloud provides tools for developers to quickly build some of the common patterns in distributed systems (e.g. configuration management, service discovery, circuit breakers, intelligent routing, micro-proxy, control bus, one-time tokens, global locks, leadership election, distributed sessions, cluster state). Coordination of distributed systems leads to boiler plate patterns, and using Spring Cloud developers can quickly stand up services and applications that implement those patterns. They will work well in any distributed environment, including the developerâ€™s own laptop, bare metal data centres, and managed platforms such as Cloud Foundry.\n Features  Spring Cloud focuses on providing good out of box experience for typical use cases and extensibility mechanism to cover others. Distributed/versioned configuration Service registration and discovery Routing Service-to-service calls Load balancing Circuit Breakers Global locks Leadership election and cluster state Distributed messaging  Spring Cloud Kubernetes  Run Spring Cloud Apps on Kubernetes  Spring Cloud Kubernetes\n"
    }
,
    {
        "ref": "https://bruce-lu.github.io/blog/coding-nodejs-async-await/",
        "title": "Coding with Node.js",
        "section": "blog",
        "date" : "2019.07.04",
        "body": " Async/await async function f() { try { let response = await fetch('/no-user-here'); let user = await response.json(); } catch(err) { // catches errors both in fetch and response.json alert(err); } } f(); // reference: https://javascript.info/async-await // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function  "
    }
,
    {
        "ref": "https://bruce-lu.github.io/blog/coding-python/",
        "title": "Coding with Python",
        "section": "blog",
        "date" : "2019.07.04",
        "body": " yield #!/usr/bin/env python # Author Bruce 12/14/17 import sys def greppattern(pattern, fullfilename): with open(fullfilename) as handle: for line in handle: if pattern in line: yield line.rstrip(\u0026quot;\\n\u0026quot;) if __name__ == \u0026quot;__main__\u0026quot;: # python blueutils.py \u0026quot;30 15\u0026quot; dbcontrace.log ''' usage: python blueutils.py \u0026quot;17-12\u0026quot; dbcontrace.log ''' pattern, fullfilename = sys.argv[1], sys.argv[2] for line in greppattern(pattern, fullfilename): print(line)  "
    }
,
    {
        "ref": "https://bruce-lu.github.io/blog/docker-cmds/",
        "title": "Docker Commands",
        "section": "blog",
        "date" : "2019.07.04",
        "body": " Get help  Get help\ndocker -h\n Get help for a command\ndocker image prune \u0026ndash;help\n  Container  Show all containers, including both running and stopped\ndocker ps -a\n Get container logs\ndocker logs $container\n Attach std in/out/error to a running container\ndocker attach $container\n Run a command in a running container interactively\ndocker exec -it $container /bin/sh\n Show detail of a container\ndocker inspect $container\n Stats\ndocker stats $container\n Start/stop a container\ndocker start / stop $container\n Remove a container\ndocker rm $container\n  Image  basic actions\ndocker image ls docker image history $image docker rmi $image\n Remove all unused images, not just dangling ones\ndocker image prune -a\n  Networking  List docker networks\ndocker network ls\n  "
    }
,
    {
        "ref": "https://bruce-lu.github.io/blog/kubernetes-cmds/",
        "title": "Kubernetes Commands",
        "section": "blog",
        "date" : "2019.07.04",
        "body": " Create/run  kubectl run busybox \u0026ndash;rm -it \u0026ndash;image=busybox /bin/sh kubectl run nginx \u0026ndash;image=nginx \u0026ndash;replicas=2 kubectl create -f a-file.yml kubectl run nginx \u0026ndash;image=nginx \u0026ndash;dry-run  Get info  kubectl -h or \u0026ndash;help kubectl $command \u0026ndash;help kubectl cluster-info kubectl get nodes kubectl get pods -o wide \u0026ndash;all-namespaces kubectl get po -o yaml kubectl get pod -l app=ratings -o jsonpath=\u0026lsquo;{.items[0].metadata.name}\u0026rsquo; kubectl get deployments kubectl get services kubectl get namespace kubectl get pv kubectl get statefulsets kubectl describe resName kubectl explain resName  Trouble shooting  kubectl logs -p $pod -c $container kubectl logs \u0026ndash;since=1h nginx kubectl exec -it myPodName -c containerNameInMyPod /bin/sh  Apply changes  kubectl apply -f a-file.yml kubectl delete -f a-file.yml kubectl scale \u0026ndash;replicas=3 deployment/nginx  "
    }
,
    {
        "ref": "https://bruce-lu.github.io/blog/linux-shells/",
        "title": "Linux Shells",
        "section": "blog",
        "date" : "2019.07.03",
        "body": " for for i in {1..10}; do echo $i;done  if # admin@~/ws/shell$cat weight-check.sh #!/bin/bash # Author: Bruce #if [ ! $# -eq 2 ]; then if [ $# -lt 2 ]; then echo \u0026quot;Not enough parameters. Usage: $0 weight-in-kilos lengh-in-centimeters\u0026quot; exit elif [ $# -gt 2 ]; then echo \u0026quot;Too many parameters. Usage: $0 weight-in-kilos lengh-in-centimeters\u0026quot; exit else # \u0026quot;\u0026quot; -\u0026gt; true; \u0026quot; \u0026quot; -\u0026gt; false if [ -z \u0026quot;$1\u0026quot; ]; then echo \u0026quot;1st parameter empty\u0026quot; exit fi if [ -n \u0026quot;$2\u0026quot; ]; then echo \u0026quot;2nd parameter not empty\u0026quot; fi echo -n \u0026quot;You entered: \u0026quot; for p in \u0026quot;$1\u0026quot; \u0026quot;$2\u0026quot;;do echo -n \u0026quot;$p \u0026quot; done echo \u0026quot;\u0026quot; fi if [ -f lock ]; then echo \u0026quot;Already run\u0026quot; fi # Adding lock if not yet echo \u0026quot;lock\u0026quot; \u0026gt; lock weight=\u0026quot;$1\u0026quot; height=\u0026quot;$2\u0026quot; ideal=$[height - 110] if [ $weight -gt $ideal ]; then echo \u0026quot;Less yummy food please\u0026quot; elif [ $weight -eq $ideal ]; then echo \u0026quot;Goodness, you are perfect!\u0026quot; else echo \u0026quot;More food please\u0026quot; fi rm -f lock  TODO "
    }
,
    {
        "ref": "https://bruce-lu.github.io/blog/linux-cool-cmd/",
        "title": "Linux Cool Commands",
        "section": "blog",
        "date" : "2019.07.03",
        "body": " Editing  vim  # Remove trailing spaces :%s/\\s\\+$//   sed -r \u0026rsquo;s/\\s+//g\u0026rsquo; afile sort afile|uniq sed  # sed [options] 'row-range+action' file # Actions: i, a, d, c, p, s # +g, +i # In place replacement, original copy with .bk suffix is created sed -i.bk 's/Z/1/g' afile # Remove lines from 3 to end sed '3,$d' # Print line 1 and line 2 only sed -n '1,2p' afile # Print lines match pattern sed -n '/A/p' afile   awk  # awk 'pattern{action}' filenames last -n 5 | awk '{print $1}' cat /etc/passwd |awk -F ':' 'BEGIN {print \u0026quot;name,shell\u0026quot;} {print $1\u0026quot;,\u0026quot;$7} END {print \u0026quot;blue,/bin/nosh\u0026quot;}' awk -F: '/^root/{print $7}' /etc/passwd   cut  # Print 1st field, each field separated by : cut -d: -f 1 /etc/passwd  Searching  find  find /etc -name passwd find . -name \u0026quot;*.txt\u0026quot; -exec echo {} \\; -exec grep banana {} \\; find ./ -type d |xargs ls -l # -I replace_str; -0 take cares of file names with blank space find . -name \u0026quot;*.bak\u0026quot; -print0 | xargs -0 -I {} mv {} ~/old.files # {} could be customized as whatever, like file in the example find /path/to/dir -iname \u0026quot;*.c\u0026quot; -print0 | xargs -0 -I file mv file ~/old.src   ls  # List one column ls -1  Logging  dmesg // kernel message, equals to journalctl -k journalctl -a /var/log  Resources  ps -ef|grep java top vmstat sar  Networking  netstat -anp|grep 80 lsof -i :80 tcpdump   Storage  lsblk fdisk -l iotop  Kernel Performance  time ls watch -n 2 free  "
    }
,
    {
        "ref": "https://bruce-lu.github.io/blog/build-web-site-by-hugo-within-hour/",
        "title": "How I Built This Web Site within an hour",
        "section": "blog",
        "date" : "2019.07.03",
        "body": " Objective Build a web site like this within an hour.\nLocal env.  macOS Mojave Hugo v0.55.6 for Mac git version 2.20.1 (client)  Prepare local env.  Install Hugo\nbrew install hugo\n Install git client\nbrew install git\n  On Github  Log on Github Create a public repository named bruce-lu.github.io\nWhere bruce-lu is my Github account name. I create a new repository bruce-lu.github.io on Github.\n  On local env.  Create workspace\nmkdir ~/ws \u0026amp;\u0026amp; cd ~/ws\n Clone the new repository\ngit clone https://github.com/bruce-lu/bruce-lu.github.io.git\n Create a Hugo site and get pulp theme\ncd bruce-lu.github.io\nmkdir site \u0026amp;\u0026amp; cd site \u0026amp;\u0026amp; git submodule add https://github.com/koirand/pulp.git themes/pulp\ncp -r themes/pulp/exampleSite/* ./\n Run the web site locally\nhugo server -D\n The first test\nhttp://localhost:1313\n Make changes in config.toml\nbaseurl = \u0026ldquo;https://bruce-lu.github.io/\u0026quot; title = \u0026ldquo;Bruce Lu\u0026rsquo;s pages\u0026rdquo; theme = \u0026ldquo;pulp\u0026rdquo;\n Add some content\nhugo new blog/first.md vim content/blog/first.md change draft: from true to false\n The second test\nhttp://localhost:1313/blog\n  Publish to Github  Generate static web pages\nhugo\nThere would be a public folder generated.\n copy files in public folder to root folder cp -r public/* ../\nThe folder structure looks like this:\nâ”œâ”€â”€ 404.html â”œâ”€â”€ blog â”‚Â â”œâ”€â”€ emoji-support â”‚Â â”‚Â â””â”€â”€ index.html â”‚Â â”œâ”€â”€ index.html â”‚Â â”œâ”€â”€ index.json â”‚Â â”œâ”€â”€ markdown-syntax â”‚Â â”‚Â â””â”€â”€ index.html â”‚Â â”œâ”€â”€ math-typesetting â”‚Â â”‚Â â””â”€â”€ index.html â”‚Â â”œâ”€â”€ placeholder-text â”‚Â â”‚Â â””â”€â”€ index.html â”‚Â â”œâ”€â”€ rich-content.md.bk â”‚Â â””â”€â”€ second â”‚Â â””â”€â”€ index.html â”œâ”€â”€ bundle.min.87ff415004641d66f3d4fb9cbf76ce073ce8a10dd5b67afca5054b00be4ebc9a.js â”œâ”€â”€ css â”‚Â â””â”€â”€ custom.css â”œâ”€â”€ img â”‚Â â”œâ”€â”€ avatar-border.svg â”‚Â â”œâ”€â”€ avatar.jpg â”‚Â â”œâ”€â”€ clear.png â”‚Â â”œâ”€â”€ favicon.ico â”‚Â â””â”€â”€ search.png â”œâ”€â”€ index.html â”œâ”€â”€ index.xml â”œâ”€â”€ js â”‚Â â””â”€â”€ custom.js â”œâ”€â”€ resources â”‚Â â””â”€â”€ _gen â”‚Â â”œâ”€â”€ assets â”‚Â â””â”€â”€ images â”œâ”€â”€ series â”‚Â â”œâ”€â”€ index.html â”‚Â â””â”€â”€ index.xml â”œâ”€â”€ site â”‚Â â”œâ”€â”€ config.toml â”‚Â â”œâ”€â”€ content â”‚Â â”‚Â â””â”€â”€ blog â”‚Â â”œâ”€â”€ public â”‚Â â”‚Â â”œâ”€â”€ 404.html â”‚Â â”‚Â â”œâ”€â”€ blog â”‚Â â”‚Â â”œâ”€â”€ bundle.min.87ff415004641d66f3d4fb9cbf76ce073ce8a10dd5b67afca5054b00be4ebc9a.js â”‚Â â”‚Â â”œâ”€â”€ css â”‚Â â”‚Â â”œâ”€â”€ img â”‚Â â”‚Â â”œâ”€â”€ index.html â”‚Â â”‚Â â”œâ”€â”€ index.xml â”‚Â â”‚Â â”œâ”€â”€ js â”‚Â â”‚Â â”œâ”€â”€ series â”‚Â â”‚Â â”œâ”€â”€ sitemap.xml â”‚Â â”‚Â â”œâ”€â”€ style.min.60c59e75c5046f0eded1491ec81bdadd4a68c3cb5d8aa97aeaa80d79260917d3.css â”‚Â â”‚Â â””â”€â”€ style.min.a6cab246517742ad1189b209575fc61556550e663cdfe02a0aab0632b39e978b.css â”‚Â â”œâ”€â”€ resources â”‚Â â”‚Â â””â”€â”€ _gen â”‚Â â”œâ”€â”€ series â”‚Â â”‚Â â”œâ”€â”€ index.html â”‚Â â”‚Â â””â”€â”€ index.xml â”‚Â â”œâ”€â”€ static â”‚Â â”‚Â â”œâ”€â”€ css â”‚Â â”‚Â â”œâ”€â”€ img â”‚Â â”‚Â â””â”€â”€ js â”‚Â â””â”€â”€ themes â”‚Â â””â”€â”€ pulp â”œâ”€â”€ sitemap.xml â””â”€â”€ style.min.a6cab246517742ad1189b209575fc61556550e663cdfe02a0aab0632b39e978b.css   Push code  cd ~/ws/bruce-lu.github.io git add . git commit -m \u0026ldquo;Initial publish\u0026rdquo; git push\n Validate  Wait for like 1 or 2 minutes, open https://bruce-lu.github.io/\nFeel free to add more blogs and enjoy ;-)   Reference  Hugo quick-start guide Getting Started with GitHub Pages pulp theme guide  "
    }
,
    {
        "ref": "https://bruce-lu.github.io/blog/markdown-syntax/",
        "title": "Markdown Syntax Guide",
        "section": "blog",
        "date" : "2019.03.11",
        "body": "This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;â€”\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\nâ€” Rob Pike1\n Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Inline\u0026nbsp;\u0026nbsp;\u0026nbsp; Markdown\u0026nbsp;\u0026nbsp;\u0026nbsp; In\u0026nbsp;\u0026nbsp;\u0026nbsp; Table     italics bold strikethrough\u0026nbsp;\u0026nbsp;\u0026nbsp; code    Code Blocks Code block with backticks html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block indented with four spaces \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo\u0026rsquo;s internal highlight shortcode \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Item First Sub-item Second Sub-item  Other Elements â€” abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\n The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015. [return]  "
    }
]
