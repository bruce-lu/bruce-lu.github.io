<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bruce Lu&#39;s pages</title>
    <link>https://bruce-lu.github.io/</link>
    <description>Recent content on Bruce Lu&#39;s pages</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 18 Jan 2020 16:11:06 +0800</lastBuildDate>
    
	<atom:link href="https://bruce-lu.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AWS Lambda together with CloudWatch and SNS to restart Beanstalk app server as needed</title>
      <link>https://bruce-lu.github.io/blog/aws-lambda-cloudwatch-sns-beanstalk-restart/</link>
      <pubDate>Sat, 18 Jan 2020 16:11:06 +0800</pubDate>
      
      <guid>https://bruce-lu.github.io/blog/aws-lambda-cloudwatch-sns-beanstalk-restart/</guid>
      <description>Goal  Restart Elastic Beanstalk app server automatically when needed In one of my IoT applications built with Elastic Beanstalk, we wanted to restart the beanstalk app server when there is no log activity occurred for a period of time. There is no such kind of built-in alarm-action feature in CloudWatch. My solution here is to demonstrate how to do this in Lambda, collaborating with other AWS services such as CloudWatch, SNS etc.</description>
    </item>
    
    <item>
      <title>AWS Elastic Beanstalk practices</title>
      <link>https://bruce-lu.github.io/blog/aws-elastic-beanstalk-practices/</link>
      <pubDate>Thu, 14 Nov 2019 10:18:09 +0800</pubDate>
      
      <guid>https://bruce-lu.github.io/blog/aws-elastic-beanstalk-practices/</guid>
      <description>Pre-reqs  aws-access-id &amp;amp; aws-secret-key are required   Log on AWS console and generate the key
 Download and install EB CLI  https://docs.amazonaws.cn/console/elasticbeanstalk/eb-cli-install
Get started with a simple PHP application on EB  Commands would be used  mkdir zaws-eb-p-blue cd zaws-eb-p-blue/ ls -ltr eb init -p PHP # or just eb init without -p, there would be more options ls echo &amp;quot;Hello World&amp;quot; &amp;gt; index.html eb create dev-env eb open   Commands output reference  admin@~/ws/zaws-eb-p-blue$eb init -p PHP Select a default region 1) us-east-1 : US East (N.</description>
    </item>
    
    <item>
      <title>ssh tunnel &amp; http proxy through socks</title>
      <link>https://bruce-lu.github.io/blog/ssh-tunnel-http-proxy-socks/</link>
      <pubDate>Tue, 15 Oct 2019 22:10:34 +0800</pubDate>
      
      <guid>https://bruce-lu.github.io/blog/ssh-tunnel-http-proxy-socks/</guid>
      <description>ssh tunnel  cmd ssh -C2qTnN -D 11111 -i ~/.ssh/ssh-rsa.ppk id@remote  C: Requests compression of all data 2: Forces ssh to try protocol version 2 only q: Quiet mode T: Disable pseudo-tty allocation n: Redirects stdin from /dev/null (actually, prevents reading from stdin) N: Do not execute a remote command (doesn&#39;t open the shell)  curl through http proxy  Using tunnel on terminal such as curl http/https  admin@~$cat .</description>
    </item>
    
    <item>
      <title>Security - Generating ssh key pair</title>
      <link>https://bruce-lu.github.io/blog/security-ssh-key-pair-generation/</link>
      <pubDate>Mon, 07 Oct 2019 08:41:34 +0800</pubDate>
      
      <guid>https://bruce-lu.github.io/blog/security-ssh-key-pair-generation/</guid>
      <description>Objective To access a remote server through ssh keys
Using ssh-keygen tool ssh-keygen -t rsa -N &amp;ldquo;&amp;rdquo; -b 2048 -C &amp;ldquo;blue-cloud-kp&amp;rdquo; -f ./blue-cloud.pub
Reference  Manage key pair  Conclusion The key pair could be used to access remote servers.</description>
    </item>
    
    <item>
      <title>Ubuntu1804 by Canonical</title>
      <link>https://bruce-lu.github.io/blog/ubuntu1804_by_canonical/</link>
      <pubDate>Tue, 27 Aug 2019 08:28:09 +0800</pubDate>
      
      <guid>https://bruce-lu.github.io/blog/ubuntu1804_by_canonical/</guid>
      <description>Package mgmt  dpkg  # dkpg does not install dependencies automatically # See if apache2 is installed dpkg -l | grep apache2 # List all files installed for ufw dpkg -L ufw # Which package installed a file dpkg -S /etc/host.conf # Install a local .deb file sudo dpkg -i zip_3.0-4_i386.deb # Uninstalling a package sudo dpkg -r zip   apt - Ubuntu&amp;rsquo;s Advanced Packaging Tool (APT)  # apt [install | remove | update | upgrade] [$pkg1 $pkg2 .</description>
    </item>
    
    <item>
      <title>Docker-compose for Wordpress</title>
      <link>https://bruce-lu.github.io/blog/wordpress-docker-compose/</link>
      <pubDate>Mon, 26 Aug 2019 23:38:09 +0800</pubDate>
      
      <guid>https://bruce-lu.github.io/blog/wordpress-docker-compose/</guid>
      <description> Get theme bitpal.zip  Bitpal theme  docker-compose.yml for wordpress cat docker-compose.yml version: &#39;3.3&#39; services: db: image: mysql:5.7 volumes: - db_data:/var/lib/mysql restart: always environment: MYSQL_ROOT_PASSWORD: * MYSQL_DATABASE: * MYSQL_USER: * MYSQL_PASSWORD: * wordpress: depends_on: - db image: wordpress:latest volumes: - /ws/bitpal:/var/www/html/wp-content/themes/bitpal # BitPal theme install ports: - &amp;quot;10000:80&amp;quot; restart: always environment: WORDPRESS_DB_HOST: db:3306 WORDPRESS_DB_USER: * WORDPRESS_DB_PASSWORD: * WORDPRESS_DB_NAME: * volumes: db_data: {}  docker-compose up </description>
    </item>
    
    <item>
      <title>Wordpress performance tuning</title>
      <link>https://bruce-lu.github.io/blog/wordpress-performance-tuning/</link>
      <pubDate>Mon, 26 Aug 2019 23:38:09 +0800</pubDate>
      
      <guid>https://bruce-lu.github.io/blog/wordpress-performance-tuning/</guid>
      <description>Disable unused features in theme I&amp;rsquo;m using BitPal them so here is what I did: Appearance -&amp;gt; Customize -&amp;gt; BitPal Performance -&amp;gt; Disable unused features in Icon Packs, Custom Post Types, Shortcodes sections Remove/Deactivate unused pages &amp;amp; plugins Deactivate used plugins Install WP Rocket (license required) This will give us options to - File optimization: Minify &amp;amp; combine css, js files - Media: Lazy loading - Enable OPcache - CDN</description>
    </item>
    
    <item>
      <title>Get started with Vue</title>
      <link>https://bruce-lu.github.io/blog/vue-dive/</link>
      <pubDate>Mon, 26 Aug 2019 23:13:34 +0800</pubDate>
      
      <guid>https://bruce-lu.github.io/blog/vue-dive/</guid>
      <description>Installation  vue.js
 Vue Devtools
 @vue/cli tool npm install -g @vue/cli // installed under /usr/local/lib/node_modules/@vue
  Create a new Vue project vue create vue-demo # vue -h for help # preset: default (babel, eslint) # package manager to use when installing dependencies: Yarn cd vue-demo yarn serve # Use &amp;quot;vue ui&amp;quot; to start GUI mgmt console. Very cool!  Basics  v-bind (shorthand is :) Dynamically bind one or more attributes, or a component prop to an expression.</description>
    </item>
    
    <item>
      <title>Learning resources</title>
      <link>https://bruce-lu.github.io/blog/learning-resources/</link>
      <pubDate>Wed, 31 Jul 2019 10:14:34 +0800</pubDate>
      
      <guid>https://bruce-lu.github.io/blog/learning-resources/</guid>
      <description>Objective Get good learning resources
Keywords  learning, resource, course  Architecture Reference  Azure AWS Aliyun  Microsoft Azure  skylines-academy-llc courses Services comparison between Azure &amp;amp; AWS  UI  Vue
 Vue2 + Bootstrap4 + Material design Bootstrap + Vue  Flutter
  Flutter get started</description>
    </item>
    
    <item>
      <title>Microsoft Azure Notes</title>
      <link>https://bruce-lu.github.io/blog/azure-notes/</link>
      <pubDate>Mon, 29 Jul 2019 10:14:34 +0800</pubDate>
      
      <guid>https://bruce-lu.github.io/blog/azure-notes/</guid>
      <description>Determine workload requirement  Identifying requirements: Use cases, goals, scopes; Assumptions: Are we gonna use cloud native tools or traditional ones? Use existing licenses? Critical Success Factors: Need to be scalable to meet xyz workload, utilizing existing operation team, no new talent required? Plan for growth Manage cost  Complaince and security requirement  Data protection in EU: GDPR Healthcare: HIPPA Government: FedRAMP  SLA - Service Level Agreement  MTTR: Mean Time To Recovery.</description>
    </item>
    
    <item>
      <title>Kafka cluster</title>
      <link>https://bruce-lu.github.io/blog/kafka-cluster/</link>
      <pubDate>Wed, 24 Jul 2019 13:36:34 +0800</pubDate>
      
      <guid>https://bruce-lu.github.io/blog/kafka-cluster/</guid>
      <description> Objective Setup Kafka cluster on three nodes
Environment  Servers  9.98.13.49 9.98.13.50 9.98.13.52
TODO </description>
    </item>
    
    <item>
      <title>Using self-signed SSL certificate for AWS Elastic Beanstalk</title>
      <link>https://bruce-lu.github.io/blog/using-self-signed-ssl-certificate-for-aws-beanstalk/</link>
      <pubDate>Wed, 24 Jul 2019 10:14:34 +0800</pubDate>
      
      <guid>https://bruce-lu.github.io/blog/using-self-signed-ssl-certificate-for-aws-beanstalk/</guid>
      <description>Objective There are cases we need run a quick PoC with HTTPS enabled in AWS Elastic Beanstalk. In such cases, one of an efficient way is to use a self-signed certificate. Please note you can use AWS Certificate Manager to generate certificate if it&amp;rsquo;s enabled in your region. I&amp;rsquo;ll demostrate how to generate and use a self-signed certificate in AWS CLI here in this blog.
Keywords  SSL, HTTPS, x509, Beanstalk, AWS  Environment  macOS in local AWS console in remote  Generating a new self-signed certificate  Generate a private key with length 2048  openssl genrsa 2048 &amp;gt; privatekey.</description>
    </item>
    
    <item>
      <title>Dive into Openstack</title>
      <link>https://bruce-lu.github.io/blog/open-stack-dive/</link>
      <pubDate>Mon, 22 Jul 2019 09:14:34 +0800</pubDate>
      
      <guid>https://bruce-lu.github.io/blog/open-stack-dive/</guid>
      <description>Objective Dive into Openstack
Keywords  KVM, Openstack, Virtualization, Nova, Glance  Environment  Ubuntu 16.04 on Virtualbox for macOS  KVM  Kernel-based Virtual Machine kvm.ko for CPU &amp;amp; RAM mgmt Linux kernel &amp;amp; Qemu for I/O virtualization e.g. Storage &amp;amp; Networking Libvirt for managing Hypervisor like KVM, VirtualBox, Xen; Openstack uses Libvirt at its bottom Libvirt componments: libvirtd as daemon, API, virsh as CLI Virt-manager: GUI tool  KVM management  egrep -o &amp;lsquo;(vmx|svm)&amp;rsquo; /proc/cpuinfo service libvirt-bin status virt-manager virsh list // list virtual machines sudo apt-get install qemu-kvm qemu-system libvirt-bin virt-manager bridge-utils vlan sudo apt-get install xinit gdm kubuntu-desktop  vCPU  Every virtual CPU is a thread of process qemu-kvm vCPU can be overcommit, but need to be tested for performance  Virtual memory  Virtual Addres -&amp;gt; Physical Address on VM -&amp;gt; Machine Address on bare metal vMem can be overcommit, but need to be tested for performance  Stoage virtualization  Virtualization through Storage pool &amp;amp; volume Default storage pool: /var/lib/libvirt/images/ A file is basically a volume  Network virtualization VM0 (vnet0), VM1 (vnet1) &amp;mdash; br0 (Linux bridge) &amp;mdash; eth0 (Physical)</description>
    </item>
    
    <item>
      <title>MongoDB sharding</title>
      <link>https://bruce-lu.github.io/blog/mongodb-sharding/</link>
      <pubDate>Thu, 18 Jul 2019 13:36:34 +0800</pubDate>
      
      <guid>https://bruce-lu.github.io/blog/mongodb-sharding/</guid>
      <description> Objective Setup MongoDB sharding on three nodes
Environment  Servers  9.98.13.49 9.98.13.50 9.98.13.52
TODO </description>
    </item>
    
    <item>
      <title>Goroutine &amp; bufferred channel&#39;s quick performance taste: TPS from 28k to 16m</title>
      <link>https://bruce-lu.github.io/blog/a-quick-taste-of-go-channel-performance/</link>
      <pubDate>Sat, 13 Jul 2019 21:44:34 +0800</pubDate>
      
      <guid>https://bruce-lu.github.io/blog/a-quick-taste-of-go-channel-performance/</guid>
      <description>Objective To get TPS (Transaction Per Second) as high as possible by using goroutine &amp;amp; bufferred channel (CSP pattern)
Environment  2.3 GHz Intel Core i5; 8 GB 2133 MHz LPDDR3 macOS Mojave 10.14.4 Go 1.12.6  Setup Go If you are new to Golang, for Go&amp;rsquo;s setup, please refer to my blog: Go - Build a web API
Create a Go project mkdir -p ~/ws/golang/src/blue/demo cd ~/ws/golang/src/blue/demo vim demo.</description>
    </item>
    
    <item>
      <title>Automation with Ansible</title>
      <link>https://bruce-lu.github.io/blog/automation-ansible/</link>
      <pubDate>Fri, 05 Jul 2019 21:36:34 +0800</pubDate>
      
      <guid>https://bruce-lu.github.io/blog/automation-ansible/</guid>
      <description>Playbook Plays -&amp;gt; Tasks -&amp;gt; Modules -&amp;gt; Handlers
Modules more than 450 modules provided by Ansible common modules: yum, ping
How to  yum install ansible Ad-Hoc: ansible $inventory -m ping Playbook: ansible-playbook mybook.yml Ansible Tower: Options, Dry-run, -C mode ansible-doc ansible-galaxy ansible-config ansible-inventory ansible-pull ansible-vault ansible-console  Configuration /etc/ansible/ansible.cfg /etc/ansible/hosts /etc/ansible/roles/
Inventory  Host 192.168.0.2 www.example.com www[01:50].example.com
 Host var www.example.com k1=v1 k2=v2
 Group [group name] www.example.com k1=v1 k2=v2 192.</description>
    </item>
    
    <item>
      <title>Bruce&#39;s Cloud Native Skillset Map</title>
      <link>https://bruce-lu.github.io/blog/bruce-cloud-native-map/</link>
      <pubDate>Fri, 05 Jul 2019 21:33:42 +0800</pubDate>
      
      <guid>https://bruce-lu.github.io/blog/bruce-cloud-native-map/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Microservices with Spring Cloud</title>
      <link>https://bruce-lu.github.io/blog/ms-spring-cloud/</link>
      <pubDate>Fri, 05 Jul 2019 12:04:14 +0800</pubDate>
      
      <guid>https://bruce-lu.github.io/blog/ms-spring-cloud/</guid>
      <description>Introduction  Spring Cloud provides tools for developers to quickly build some of the common patterns in distributed systems (e.g. configuration management, service discovery, circuit breakers, intelligent routing, micro-proxy, control bus, one-time tokens, global locks, leadership election, distributed sessions, cluster state). Coordination of distributed systems leads to boiler plate patterns, and using Spring Cloud developers can quickly stand up services and applications that implement those patterns. They will work well in any distributed environment, including the developer’s own laptop, bare metal data centres, and managed platforms such as Cloud Foundry.</description>
    </item>
    
    <item>
      <title>JVM tuning</title>
      <link>https://bruce-lu.github.io/blog/jvm-tuning/</link>
      <pubDate>Thu, 04 Jul 2019 21:46:34 +0800</pubDate>
      
      <guid>https://bruce-lu.github.io/blog/jvm-tuning/</guid>
      <description>Tags jvm tuning jstat jhat jmap gc  Env  Spring Cloud Greenwich Spring Boot 2.1.5 Java HotSpot&amp;trade; 64-Bit Server VM (build 25.181-b13, mixed mode) STS (Spring Tool Suite) 4.1.1 MackBook Pro Mojave  Objective  Minimize Full GC, down to 0 if possible  Prerequisites  Build a jar  mvn -B -DskipTests clean package  Baseline - default jvm settings  Run  java -jar discovery-center-0.0.1-SNAPSHOT.jar   jstat -gc  S0C S1C S0U S1U EC EU OC OU MC MU CCSC CCSU YGC YGCT FGC FGCT GCT 7168.</description>
    </item>
    
    <item>
      <title>Go - Build a web API</title>
      <link>https://bruce-lu.github.io/blog/go-build-a-web-api/</link>
      <pubDate>Thu, 04 Jul 2019 21:36:34 +0800</pubDate>
      
      <guid>https://bruce-lu.github.io/blog/go-build-a-web-api/</guid>
      <description>Objective Build a web API by using Go language on Linux
Setup Go  Download  wget https://dl.google.com/go/go1.12.4.linux-amd64.tar.gz tar -C /usr/local -xzf ./go1.12.4.linux-amd64.tar.gz
 Configure PATH  Add Go to PATH in ~/.bash_profile
export PATH=$PATH:/usr/local/go/bin   Source  . ~/.bash_profile   Reference  Create a Go project mkdir -p /opt/ws/go/src/blue/http cd /opt/ws/go/src/blue/http vim BlueHTTPServer.go  package main; import ( &amp;quot;net/http&amp;quot; ) func say(res http.ResponseWriter, req *http.Request) { res.</description>
    </item>
    
    <item>
      <title>Microservices principles</title>
      <link>https://bruce-lu.github.io/blog/ms-pattern-theory/</link>
      <pubDate>Thu, 04 Jul 2019 21:36:34 +0800</pubDate>
      
      <guid>https://bruce-lu.github.io/blog/ms-pattern-theory/</guid>
      <description>DDD  Domain-driven design (DDD) is an approach to software development for complex needs by connecting the implementation to an evolving model. Reference: https://airbrake.io/blog/software-design/domain-driven-design
 CAP  The CAP Theorem is a fundamental theorem in distributed systems that states any distributed system can have at most two of the following three properties. Consistency. Availability. Partition tolerance.
 ACID &amp;amp; BASE  ACID
 Atomic: Everything in a transaction succeeds or the entire transaction is rolled back.</description>
    </item>
    
    <item>
      <title>Coding with Node.js</title>
      <link>https://bruce-lu.github.io/blog/coding-nodejs-async-await/</link>
      <pubDate>Thu, 04 Jul 2019 15:55:42 +0800</pubDate>
      
      <guid>https://bruce-lu.github.io/blog/coding-nodejs-async-await/</guid>
      <description> Async/await async function f() { try { let response = await fetch(&#39;/no-user-here&#39;); let user = await response.json(); } catch(err) { // catches errors both in fetch and response.json alert(err); } } f(); // reference: https://javascript.info/async-await // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function  </description>
    </item>
    
    <item>
      <title>Coding with Python</title>
      <link>https://bruce-lu.github.io/blog/coding-python/</link>
      <pubDate>Thu, 04 Jul 2019 15:37:13 +0800</pubDate>
      
      <guid>https://bruce-lu.github.io/blog/coding-python/</guid>
      <description> yield #!/usr/bin/env python # Author Bruce 12/14/17 import sys def greppattern(pattern, fullfilename): with open(fullfilename) as handle: for line in handle: if pattern in line: yield line.rstrip(&amp;quot;\n&amp;quot;) if __name__ == &amp;quot;__main__&amp;quot;: # python blueutils.py &amp;quot;30 15&amp;quot; dbcontrace.log &#39;&#39;&#39; usage: python blueutils.py &amp;quot;17-12&amp;quot; dbcontrace.log &#39;&#39;&#39; pattern, fullfilename = sys.argv[1], sys.argv[2] for line in greppattern(pattern, fullfilename): print(line)  </description>
    </item>
    
    <item>
      <title>Docker Commands</title>
      <link>https://bruce-lu.github.io/blog/docker-cmds/</link>
      <pubDate>Thu, 04 Jul 2019 15:28:09 +0800</pubDate>
      
      <guid>https://bruce-lu.github.io/blog/docker-cmds/</guid>
      <description>Get help  Get help
docker -h
 Get help for a command
docker image prune &amp;ndash;help
  Container  Show all containers, including both running and stopped
docker ps -a
 Get container logs
docker logs $container
 Attach std in/out/error to a running container
docker attach $container
 Run a command in a running container interactively
docker exec -it $container /bin/sh
 Show detail of a container</description>
    </item>
    
    <item>
      <title>Kubernetes Commands</title>
      <link>https://bruce-lu.github.io/blog/kubernetes-cmds/</link>
      <pubDate>Thu, 04 Jul 2019 15:23:27 +0800</pubDate>
      
      <guid>https://bruce-lu.github.io/blog/kubernetes-cmds/</guid>
      <description>Create/run  kubectl run busybox &amp;ndash;rm -it &amp;ndash;image=busybox /bin/sh kubectl run nginx &amp;ndash;image=nginx &amp;ndash;replicas=2 kubectl run nginx &amp;ndash;image=nginx &amp;ndash;dry-run kubectl create -f a-file.yml kubectl create deployment kubernetes-bootcamp &amp;ndash;image=gcr.io/google-samples/kubernetes-bootcamp:v1  Get info  kubectl -h or &amp;ndash;help kubectl $command &amp;ndash;help kubectl cluster-info kubectl get nodes kubectl get pods -o wide &amp;ndash;all-namespaces kubectl get po -o yaml kubectl get pod -l app=ratings -o jsonpath=&amp;lsquo;{.items[0].metadata.name}&amp;rsquo; kubectl get pods -o go-template &amp;ndash;template &amp;lsquo;{{range.items}}{{.metadata.status}}{{&amp;rdquo;\n&amp;rdquo;}}{{end}}&amp;rsquo; kubectl get deployments kubectl get services kubectl get namespace kubectl get pv kubectl get statefulsets kubectl describe resName kubectl explain resName kubectl proxy and curl http://localhost:8001/version  Trouble shooting  kubectl logs -p $pod -c $container kubectl logs &amp;ndash;since=1h nginx kubectl exec -it myPodName -c containerNameInMyPod /bin/sh  Apply changes  kubectl apply -f a-file.</description>
    </item>
    
    <item>
      <title>Linux Shells</title>
      <link>https://bruce-lu.github.io/blog/linux-shells/</link>
      <pubDate>Wed, 03 Jul 2019 21:38:59 +0800</pubDate>
      
      <guid>https://bruce-lu.github.io/blog/linux-shells/</guid>
      <description>for for i in {1..10}; do echo $i;done  if # admin@~/ws/shell$cat weight-check.sh #!/bin/bash # Author: Bruce #if [ ! $# -eq 2 ]; then if [ $# -lt 2 ]; then echo &amp;quot;Not enough parameters. Usage: $0 weight-in-kilos lengh-in-centimeters&amp;quot; exit elif [ $# -gt 2 ]; then echo &amp;quot;Too many parameters. Usage: $0 weight-in-kilos lengh-in-centimeters&amp;quot; exit else # &amp;quot;&amp;quot; -&amp;gt; true; &amp;quot; &amp;quot; -&amp;gt; false if [ -z &amp;quot;$1&amp;quot; ]; then echo &amp;quot;1st parameter empty&amp;quot; exit fi if [ -n &amp;quot;$2&amp;quot; ]; then echo &amp;quot;2nd parameter not empty&amp;quot; fi echo -n &amp;quot;You entered: &amp;quot; for p in &amp;quot;$1&amp;quot; &amp;quot;$2&amp;quot;;do echo -n &amp;quot;$p &amp;quot; done echo &amp;quot;&amp;quot; fi if [ -f lock ]; then echo &amp;quot;Already run&amp;quot; fi # Adding lock if not yet echo &amp;quot;lock&amp;quot; &amp;gt; lock weight=&amp;quot;$1&amp;quot; height=&amp;quot;$2&amp;quot; ideal=$[height - 110] if [ $weight -gt $ideal ]; then echo &amp;quot;Less yummy food please&amp;quot; elif [ $weight -eq $ideal ]; then echo &amp;quot;Goodness, you are perfect!</description>
    </item>
    
    <item>
      <title>Linux Cool Commands</title>
      <link>https://bruce-lu.github.io/blog/linux-cool-cmd/</link>
      <pubDate>Wed, 03 Jul 2019 21:36:34 +0800</pubDate>
      
      <guid>https://bruce-lu.github.io/blog/linux-cool-cmd/</guid>
      <description>Editing  vim  # Remove trailing spaces :%s/\s\+$//   sed -r &amp;rsquo;s/\s+//g&amp;rsquo; afile sort afile|uniq sed  # sed [options] &#39;row-range+action&#39; file # Actions: i, a, d, c, p, s # +g, +i # In place replacement, original copy with .bk suffix is created sed -i.bk &#39;s/Z/1/g&#39; afile # Remove lines from 3 to end sed &#39;3,$d&#39; # Print line 1 and line 2 only sed -n &#39;1,2p&#39; afile # Print lines match pattern sed -n &#39;/A/p&#39; afile   awk  # awk &#39;pattern{action}&#39; filenames last -n 5 | awk &#39;{print $1}&#39; cat /etc/passwd |awk -F &#39;:&#39; &#39;BEGIN {print &amp;quot;name,shell&amp;quot;} {print $1&amp;quot;,&amp;quot;$7} END {print &amp;quot;blue,/bin/nosh&amp;quot;}&#39; awk -F: &#39;/^root/{print $7}&#39; /etc/passwd   cut  # Print 1st field, each field separated by : cut -d: -f 1 /etc/passwd  Searching  find  find /etc -name passwd find .</description>
    </item>
    
    <item>
      <title>How I Built This Web Site within an hour</title>
      <link>https://bruce-lu.github.io/blog/how-i-build-this-web-site/</link>
      <pubDate>Wed, 03 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bruce-lu.github.io/blog/how-i-build-this-web-site/</guid>
      <description>Objective Build a web site like this within an hour.
Local env.  macOS Mojave Hugo v0.55.6 for Mac git version 2.20.1 (client)  Prepare local env.  Install Hugo
brew install hugo
 Install git client
brew install git
  On Github  Log on Github Create a public repository named bruce-lu.github.io
Where bruce-lu is my Github account name. I create a new repository bruce-lu.github.io on Github.</description>
    </item>
    
    <item>
      <title>Note of How to start a speech</title>
      <link>https://bruce-lu.github.io/blog/how-to-start-a-speech/</link>
      <pubDate>Fri, 24 May 2019 10:12:32 +0800</pubDate>
      
      <guid>https://bruce-lu.github.io/blog/how-to-start-a-speech/</guid>
      <description>Thanks to  How to start a speech  Keywords  speech  The 3rd way: With a question that maters to the audience The 2nd way: A fact that shockes (change your thinking) There is more people that is alive today than ever died Every 2 minutes, the energy reaching the earch from the sun is equivalent to the whole annual usage of humanity
The best way: Tell stories from own life, talk about people behind the story  The same way we start a story to a child: Once upon a time.</description>
    </item>
    
    <item>
      <title>Markdown Syntax Guide</title>
      <link>https://bruce-lu.github.io/blog/markdown-syntax/</link>
      <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://bruce-lu.github.io/blog/markdown-syntax/</guid>
      <description>&lt;p&gt;This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>